{"ast":null,"code":"import _asyncToGenerator from \"/Applications/XAMPP/xamppfiles/htdocs/TwitterApp/TestAng/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': '*',\n    'Access-Control-Allow-Methods': '*'\n  }),\n  withCredentials: true\n}; //const token = this.getToken();\n//console.log(token);\n\nconst httpAuthHeader = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': '*',\n    'Access-Control-Allow-Methods': '*' //'Authorization': `Bearer ${token}`\n\n  }),\n  withCredentials: true\n};\nconst httpTweetHeader = {\n  headers: new HttpHeaders({\n    //'Content-Type': ,\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': '*',\n    'Access-Control-Allow-Methods': '*' //'Authorization': `Bearer ${token}`\n\n  }),\n  withCredentials: true\n};\nexport class TestServiceService {\n  constructor(http) {\n    this.http = http; // public getToken(): string {\n    //   return localStorage.getItem('token');\n    // }  \n\n    this.apiUrl = 'http://localhost/twitterapp/Twitter';\n  }\n\n  getTweets() {\n    const url = `${this.apiUrl}/?page=index`;\n    return this.http.get(url, httpAuthHeader);\n  }\n\n  postTweet(tweet) {\n    const url = `${this.apiUrl}/?page=index&action=add`;\n    return this.http.post(url, tweet, httpTweetHeader);\n  }\n\n  removeTweet(tweet) {\n    const url = `${this.apiUrl}/?action=delete&id=${tweet.id}`;\n    return this.http.get(url, httpAuthHeader);\n  } //Refresh access token (when displaying tweets+checking if the user is allowed to see the page)\n\n\n  refreshToken() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const url = `${_this.apiUrl}/?page=auth&action=refresh`; //console.log(token);\n\n      return yield _this.http.get(url, httpAuthHeader).toPromise();\n    })();\n  }\n\n  clearRefresh() {\n    const url = `${this.apiUrl}/?page=auth&action=clear`;\n    return this.http.get(url, httpAuthHeader);\n  }\n\n  sendImage(imageData) {\n    const url = `${this.apiUrl}/?page=index&action=saveImage`;\n    return this.http.post(url, imageData, httpTweetHeader);\n  }\n\n}\n\nTestServiceService.ɵfac = function TestServiceService_Factory(t) {\n  return new (t || TestServiceService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nTestServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TestServiceService,\n  factory: TestServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/TwitterApp/TestAng/src/app/tweets-service.service.ts"],"names":[],"mappings":";AAEA,SAAS,WAAT,QAA4B,sBAA5B;;;AAOA,MAAM,WAAW,GAAG;AAClB,EAAA,OAAO,EAAE,IAAI,WAAJ,CAAgB;AACvB,oBAAgB,kBADO;AAEvB,mCAA+B,GAFR;AAGvB,oCAAgC,GAHT;AAIvB,oCAAgC;AAJT,GAAhB,CADS;AAOlB,EAAA,eAAe,EAAE;AAPC,CAApB,C,CASA;AACA;;AACA,MAAM,cAAc,GAAG;AACrB,EAAA,OAAO,EAAE,IAAI,WAAJ,CACR;AACC,oBAAgB,kBADjB;AAEC,mCAA+B,GAFhC;AAGC,oCAAgC,GAHjC;AAIC,oCAAgC,GAJjC,CAKC;;AALD,GADQ,CADY;AASrB,EAAA,eAAe,EAAE;AATI,CAAvB;AAWA,MAAM,eAAe,GAAG;AACtB,EAAA,OAAO,EAAE,IAAI,WAAJ,CACR;AACC;AACA,mCAA+B,GAFhC;AAGC,oCAAgC,GAHjC;AAIC,oCAAgC,GAJjC,CAKC;;AALD,GADQ,CADa;AAStB,EAAA,eAAe,EAAE;AATK,CAAxB;AAcA,OAAM,MAAO,kBAAP,CAAyB;AAK7B,EAAA,WAAA,CAAqB,IAArB,EAAoC;AAAf,SAAA,IAAA,GAAA,IAAA,CAAe,CAJpC;AACA;AACA;;AACQ,SAAA,MAAA,GAAS,qCAAT;AAEP;;AACD,EAAA,SAAS,GAAA;AACT,UAAM,GAAG,GAAG,GAAG,KAAK,MAAM,cAA1B;AACA,WAAO,KAAK,IAAL,CAAU,GAAV,CAAuB,GAAvB,EAA2B,cAA3B,CAAP;AACC;;AAED,EAAA,SAAS,CAAC,KAAD,EAAY;AACnB,UAAM,GAAG,GAAG,GAAG,KAAK,MAAM,yBAA1B;AACA,WAAO,KAAK,IAAL,CAAU,IAAV,CAAyB,GAAzB,EAA6B,KAA7B,EAAoC,eAApC,CAAP;AACD;;AAED,EAAA,WAAW,CAAC,KAAD,EAAY;AACrB,UAAM,GAAG,GAAG,GAAG,KAAK,MAAM,sBAAsB,KAAK,CAAC,EAAE,EAAxD;AACA,WAAO,KAAK,IAAL,CAAU,GAAV,CAAuB,GAAvB,EAA4B,cAA5B,CAAP;AACD,GApB4B,CAqB7B;;;AACM,EAAA,YAAY,GAAA;AAAA;;AAAA;AAChB,YAAM,GAAG,GAAG,GAAG,KAAI,CAAC,MAAM,4BAA1B,CADgB,CAEhB;;AAEA,mBAAa,KAAI,CAAC,IAAL,CAAU,GAAV,CAAuB,GAAvB,EAA4B,cAA5B,EAA4C,SAA5C,EAAb;AAJgB;AAKjB;;AACD,EAAA,YAAY,GAAA;AACV,UAAM,GAAG,GAAG,GAAG,KAAK,MAAM,0BAA1B;AACA,WAAO,KAAK,IAAL,CAAU,GAAV,CAAyB,GAAzB,EAA8B,cAA9B,CAAP;AACD;;AACD,EAAA,SAAS,CAAC,SAAD,EAAoB;AAC3B,UAAM,GAAG,GAAG,GAAG,KAAK,MAAM,+BAA1B;AACA,WAAO,KAAK,IAAL,CAAU,IAAV,CAAyB,GAAzB,EAA8B,SAA9B,EAAyC,eAAzC,CAAP;AAED;;AApC4B;;;mBAAlB,kB,EAAkB,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,UAAA,C;AAAA,C;;;SAAlB,kB;AAAkB,EAAA,OAAA,EAAlB,kBAAkB,CAAA,I;AAAA,EAAA,UAAA,EAFjB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { HttpInterceptor } from '@angular/common/http';\nimport { TweetsInterceptorInterceptor } from './tweets/tweets-interceptor.interceptor';\nimport { HashLocationStrategy } from '@angular/common';\nimport { Tweet } from './Tweet';\nimport { Token } from './Token';\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': '*',\n    'Access-Control-Allow-Methods': '*'\n  }),\n  withCredentials: true\n};\n//const token = this.getToken();\n//console.log(token);\nconst httpAuthHeader = {\n  headers: new HttpHeaders\n  ({\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': '*',\n    'Access-Control-Allow-Methods': '*',\n    //'Authorization': `Bearer ${token}`\n}),\n  withCredentials: true\n};\nconst httpTweetHeader = {\n  headers: new HttpHeaders\n  ({\n    //'Content-Type': ,\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': '*',\n    'Access-Control-Allow-Methods': '*',\n    //'Authorization': `Bearer ${token}`\n}),\n  withCredentials: true\n}\n@Injectable({\n  providedIn: 'root'\n})\nexport class TestServiceService {\n  // public getToken(): string {\n  //   return localStorage.getItem('token');\n  // }  \n  private apiUrl = 'http://localhost/twitterapp/Twitter';\n  constructor( private http:HttpClient) { \n  }\n  getTweets():Observable<Tweet[]>{\n  const url = `${this.apiUrl}/?page=index`;\n  return this.http.get<Tweet[]>(url,httpAuthHeader);\n  }\n\n  postTweet(tweet:Tweet):Observable<FormData>{\n    const url = `${this.apiUrl}/?page=index&action=add`;\n    return this.http.post<FormData>(url,tweet, httpTweetHeader);\n  }\n\n  removeTweet(tweet:Tweet){\n    const url = `${this.apiUrl}/?action=delete&id=${tweet.id}`;\n    return this.http.get<Tweet[]>(url, httpAuthHeader);\n  }\n  //Refresh access token (when displaying tweets+checking if the user is allowed to see the page)\n  async refreshToken(): Promise <Token>{\n    const url = `${this.apiUrl}/?page=auth&action=refresh`;\n    //console.log(token);\n    \n    return await this.http.get <Token> (url, httpAuthHeader).toPromise();\n  }\n  clearRefresh(): Observable <boolean>{\n    const url = `${this.apiUrl}/?page=auth&action=clear`;\n    return this.http.get <boolean> (url, httpAuthHeader);\n  }\n  sendImage(imageData: FormData): Observable <Object>{\n    const url = `${this.apiUrl}/?page=index&action=saveImage`;\n    return this.http.post <Object> (url, imageData, httpTweetHeader);\n\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}