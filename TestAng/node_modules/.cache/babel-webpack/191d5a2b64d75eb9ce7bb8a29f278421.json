{"ast":null,"code":"import _asyncToGenerator from \"/Applications/XAMPP/xamppfiles/htdocs/TwitterApp/TestAng/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpErrorResponse } from '@angular/common/http';\nimport jwt_decode from \"jwt-decode\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/tweets-service.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"../add-tweets/add-tweets.component\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"../my_tweets_button/tweets-button/tweets-button.component\";\nimport * as i7 from \"../tweet-item/tweet-item.component\";\n\nfunction TweetsComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"app-tweets-button\", 7);\n    i0.ɵɵlistener(\"onShowMyTweets\", function TweetsComponent_div_3_Template_app_tweets_button_onShowMyTweets_1_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.myTweets();\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"text\", \"Show my tweets\");\n  }\n}\n\nfunction TweetsComponent_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"app-tweets-button\", 7);\n    i0.ɵɵlistener(\"onShowMyTweets\", function TweetsComponent_ng_template_4_Template_app_tweets_button_onShowMyTweets_0_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.allTweets();\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵproperty(\"text\", \"Show all tweets\");\n  }\n}\n\nfunction TweetsComponent_app_tweet_item_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"app-tweet-item\", 8);\n    i0.ɵɵlistener(\"onDeleteTweet\", function TweetsComponent_app_tweet_item_7_Template_app_tweet_item_onDeleteTweet_0_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.deleteTweet($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tweet_r8 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"username\", ctx_r3.username)(\"tweet\", tweet_r8);\n  }\n}\n\nexport class TweetsComponent {\n  constructor(tweetService, router) {\n    this.tweetService = tweetService;\n    this.router = router;\n    this.showAll = true;\n  }\n\n  checkAllow() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        let refresh = yield _this.tweetService.refreshToken();\n\n        if (refresh) {\n          localStorage.setItem('token', refresh.jwt);\n          console.log(refresh.jwt);\n        }\n\n        if (!refresh) {\n          console.log(refresh);\n          console.log('valid');\n        }\n      } catch (error) {\n        if (error instanceof HttpErrorResponse) {\n          console.log(error.error);\n        }\n\n        _this.onLogOut();\n      }\n    })();\n  }\n\n  getTweets() {\n    this.checkAllow();\n    this.tweetService.getTweets().subscribe(tweets => {\n      if (!tweets) {//Reload the page again to show the tweets\n      }\n\n      this.tweets = tweets;\n    }, err => {\n      if (err instanceof HttpErrorResponse) {\n        if (err.status === 0) {}\n\n        console.log(err); //this.onLogOut();\n      }\n    });\n  } //}\n\n\n  onLogOut() {\n    //Clean localStorage\n    localStorage.clear(); //Clean cookie\n\n    this.tweetService.clearRefresh().subscribe(res => {\n      if (!res) {\n        console.log('You should change your password');\n        this.router.navigate(['/login']);\n      } else {\n        console.log(res);\n        this.router.navigate(['/login']);\n      }\n    });\n  }\n\n  getUsername() {\n    try {\n      const token = localStorage.getItem('token');\n      const payload = jwt_decode(token);\n      this.username = payload.data['username'];\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  ngOnInit() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this2.checkAllow();\n\n      _this2.getTweets();\n\n      _this2.getUsername();\n\n      _this2.getImage();\n    })();\n  }\n\n  addTweet(tweet) {\n    //Refresh the token before sending the tweet\n    this.checkAllow();\n    alert(tweet);\n    const newTweet = {\n      username: this.username,\n      tweet: tweet.tweet,\n      image: tweet.image\n    }; //Post tweet\n\n    this.tweetService.postTweet(newTweet).subscribe(tweets => {\n      this.tweets = tweets;\n    }); //If there is a picture - send it as well\n    // if (tweet.image){\n    //   this.tweetService.sendImage(tweet.image).subscribe(\n    //     res=>{\n    //       console.log(res);\n    //     }, \n    //   )\n  }\n\n}\n\nTweetsComponent.ɵfac = function TweetsComponent_Factory(t) {\n  return new (t || TweetsComponent)(i0.ɵɵdirectiveInject(i1.TestServiceService), i0.ɵɵdirectiveInject(i2.Router));\n};\n\nTweetsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TweetsComponent,\n  selectors: [[\"app-tweets\"]],\n  decls: 10,\n  vars: 5,\n  consts: [[\"routerLink\", \"/account\", 1, \"tweets-button\", \"account\", 3, \"ngModel\", \"ngModelChange\"], [3, \"onAddTweet\", \"onSaveUploaded\"], [4, \"ngIf\", \"ngIfElse\"], [\"showAllTweets\", \"\"], [1, \"tweets-feed\"], [3, \"username\", \"tweet\", \"onDeleteTweet\", 4, \"ngFor\", \"ngForOf\"], [1, \"tweets-button\", \"logout\", 3, \"click\"], [3, \"text\", \"onShowMyTweets\"], [3, \"username\", \"tweet\", \"onDeleteTweet\"]],\n  template: function TweetsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"button\", 0);\n      i0.ɵɵlistener(\"ngModelChange\", function TweetsComponent_Template_button_ngModelChange_0_listener($event) {\n        return ctx.username = $event;\n      });\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"app-add-tweets\", 1);\n      i0.ɵɵlistener(\"onAddTweet\", function TweetsComponent_Template_app_add_tweets_onAddTweet_2_listener($event) {\n        return ctx.addTweet($event);\n      })(\"onSaveUploaded\", function TweetsComponent_Template_app_add_tweets_onSaveUploaded_2_listener($event) {\n        return ctx.saveUploadedImage($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(3, TweetsComponent_div_3_Template, 2, 1, \"div\", 2);\n      i0.ɵɵtemplate(4, TweetsComponent_ng_template_4_Template, 1, 1, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelementStart(6, \"div\", 4);\n      i0.ɵɵtemplate(7, TweetsComponent_app_tweet_item_7_Template, 1, 2, \"app-tweet-item\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"button\", 6);\n      i0.ɵɵlistener(\"click\", function TweetsComponent_Template_button_click_8_listener() {\n        return ctx.onLogOut();\n      });\n      i0.ɵɵtext(9, \"Log out\");\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      const _r1 = i0.ɵɵreference(5);\n\n      i0.ɵɵproperty(\"ngModel\", ctx.username);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\"Hi, \", ctx.username, \"\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.showAll)(\"ngIfElse\", _r1);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngForOf\", ctx.tweets);\n    }\n  },\n  directives: [i2.RouterLink, i3.NgControlStatus, i3.NgModel, i4.AddTweetsComponent, i5.NgIf, i5.NgForOf, i6.TweetsButtonComponent, i7.TweetItemComponent],\n  styles: [\".tweets-button[_ngcontent-%COMP%]{\\n    background-color: inherit;\\n    border: none;\\n    margin-bottom: 1em;\\n    font-size: 16px;\\n    color: rgb(174, 197, 91);\\n    padding: 5px;\\n    width: 80%;\\n    margin-left: 10%;\\n    text-align: left;\\n    display: block;\\n    cursor: pointer;\\n}\\n.logout[_ngcontent-%COMP%]{\\n    color: #111;\\n    background-color: rgb(174, 197, 91);\\n    width: 20%;\\n    text-align: center;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInR3ZWV0cy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0kseUJBQXlCO0lBQ3pCLFlBQVk7SUFDWixrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLHdCQUF3QjtJQUN4QixZQUFZO0lBQ1osVUFBVTtJQUNWLGdCQUFnQjtJQUNoQixnQkFBZ0I7SUFDaEIsY0FBYztJQUNkLGVBQWU7QUFDbkI7QUFDQTtJQUNJLFdBQVc7SUFDWCxtQ0FBbUM7SUFDbkMsVUFBVTtJQUNWLGtCQUFrQjtBQUN0QiIsImZpbGUiOiJ0d2VldHMuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi50d2VldHMtYnV0dG9ue1xuICAgIGJhY2tncm91bmQtY29sb3I6IGluaGVyaXQ7XG4gICAgYm9yZGVyOiBub25lO1xuICAgIG1hcmdpbi1ib3R0b206IDFlbTtcbiAgICBmb250LXNpemU6IDE2cHg7XG4gICAgY29sb3I6IHJnYigxNzQsIDE5NywgOTEpO1xuICAgIHBhZGRpbmc6IDVweDtcbiAgICB3aWR0aDogODAlO1xuICAgIG1hcmdpbi1sZWZ0OiAxMCU7XG4gICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG59XG4ubG9nb3V0e1xuICAgIGNvbG9yOiAjMTExO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxNzQsIDE5NywgOTEpO1xuICAgIHdpZHRoOiAyMCU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xufSJdfQ== */\"]\n});\ndeleteTweet(tweet, Tweet);\n{\n  this.checkAllow();\n  this.tweetService.removeTweet(tweet).subscribe(tweets => {\n    this.tweets = tweets;\n  }); //Refresh the token before removing the tweet\n}\nmyTweets();\n{\n  let myTweets = [];\n  this.tweets.forEach(tweet => {\n    if (this.username === tweet.username) {\n      myTweets.push(tweet);\n    }\n  });\n  this.tweets = myTweets;\n  this.showAll = false;\n  ;\n}\nallTweets();\n{\n  this.getTweets();\n  this.showAll = true;\n}\ngetImage();\n{\n  if (localStorage.getItem('image')) {}\n}\nsaveUploadedImage(image, File);\n{\n  this.uploadedImg = image; // const imageData = new FormData();\n  // imageData.append('file', image);\n  // this.tweetService.sendImage(imageData).subscribe(\n  //   res=>{\n  //     console.log(res);\n  //   }\n  // )\n  //console.log(imageData.append);\n}","map":{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/TwitterApp/TestAng/src/app/tweets/components/tweets/tweets.component.ts","/Applications/XAMPP/xamppfiles/htdocs/TwitterApp/TestAng/src/app/tweets/components/tweets/tweets.component.html"],"names":[],"mappings":"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","sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { Tweet } from 'src/app/Tweet';\nimport { Router } from '@angular/router';\nimport jwt_decode, {JwtPayload,JwtDecodeOptions,JwtHeader} from \"jwt-decode\";\nimport { TestServiceService } from 'src/app/tweets-service.service';\nimport { TweetsInterceptorInterceptor } from '../../tweets-interceptor.interceptor';\n@Component({\n  selector: 'app-tweets',\n  templateUrl: './tweets.component.html',\n  styleUrls: ['./tweets.component.css']\n})\nexport class TweetsComponent implements OnInit {\n  tweets!:Tweet[];\n  username!:string;\n  showAll = true;\n  uploadedImg!: File;\n  constructor(public tweetService:TestServiceService, private router: Router) {\n    \n      \n   }\n   async checkAllow(){\n    try{\n      let refresh = await this.tweetService.refreshToken();\n    if(refresh){\n      localStorage.setItem('token', refresh.jwt);\n      console.log(refresh.jwt);\n    }\n    if(!refresh){\n      console.log(refresh);\n      console.log('valid');\n    }\n    \n    } catch(error){\n      if(error instanceof HttpErrorResponse){\n        console.log(error.error);\n      }\n      this.onLogOut();\n    }\n   }\n   getTweets(){\n      this.checkAllow();\n      this.tweetService.getTweets().subscribe(\n        tweets=>{\n        if(!tweets){\n  \n          //Reload the page again to show the tweets\n          \n        }\n        this.tweets=tweets\n      },\n  \n        err=>{\n          if(err instanceof HttpErrorResponse){\n            if(err.status === 0){\n              \n              \n            }\n            console.log(err);\n            //this.onLogOut();\n          }\n        });\n      } \n      //}\n      \n  \n   onLogOut(){\n    //Clean localStorage\n    localStorage.clear();\n    //Clean cookie\n    this.tweetService.clearRefresh().subscribe(\n      res=>{\n        if(!res){\n          console.log('You should change your password');\n          this.router.navigate(['/login']);\n        } \n        else{\n          console.log(res);\n          this.router.navigate(['/login']);\n        }\n      }\n    );\n  }\n  \n  getUsername(this: any){\n    try{\n      const token = localStorage.getItem('token');\n      const payload: any = jwt_decode(token!);\n      this.username = payload.data['username'];\n    } catch(error){\n      console.log(error);\n    }\n\n  }\n async ngOnInit() {\n      await this.checkAllow();\n      this.getTweets();\n      this.getUsername();\n      this.getImage()\n}\naddTweet(tweet:Tweet){\n  //Refresh the token before sending the tweet\n  this.checkAllow()\n  alert( tweet);\n  const newTweet:Tweet = {\n    username: this.username,\n    tweet: tweet.tweet,\n    image: tweet.image\n  }\n\n  //Post tweet\n  this.tweetService.postTweet(newTweet).subscribe((tweets:Tweet[])=>{\n    this.tweets = tweets;\n  });\n\n  //If there is a picture - send it as well\n  // if (tweet.image){\n  //   this.tweetService.sendImage(tweet.image).subscribe(\n  //     res=>{\n  //       console.log(res);\n  //     }, \n  //   )\n  }\n}\n\ndeleteTweet(tweet: Tweet){\n  \n  this.checkAllow();\n  \n  this.tweetService.removeTweet(tweet).subscribe((tweets:Tweet[])=>{\n    this.tweets = tweets;\n  });\n\n  //Refresh the token before removing the tweet\n  \n\n}\n\n\nmyTweets(){\n  let myTweets: Tweet[]=[];\n  this.tweets.forEach(tweet => {\n    if(this.username === tweet.username){\n      myTweets.push(tweet);\n    }\n\n  })\n  this.tweets = myTweets;\n  this.showAll = false;\n  ;\n}\nallTweets(){\n  this.getTweets();\n  this.showAll=true;\n}\ngetImage(){\n  if(localStorage.getItem('image')){\n    \n  }\n}\nsaveUploadedImage(image: File){\n\n    this.uploadedImg = image;\n    // const imageData = new FormData();\n    // imageData.append('file', image);\n    \n    // this.tweetService.sendImage(imageData).subscribe(\n    //   res=>{\n    //     console.log(res);\n    //   }\n    // )\n    //console.log(imageData.append);\n  }\n}\n","<button  class=\"tweets-button account\"[(ngModel)]=\"username\" routerLink=\"/account\" >Hi, {{ username }}</button>\n<app-add-tweets (onAddTweet)=\"addTweet($event)\" (onSaveUploaded)=\"saveUploadedImage($event)\"></app-add-tweets>\n<div *ngIf=\"showAll; else showAllTweets\">\n    <app-tweets-button [text]=\"'Show my tweets'\" (onShowMyTweets)=\"myTweets()\"></app-tweets-button>\n</div>\n<ng-template #showAllTweets>\n    <app-tweets-button [text]=\"'Show all tweets'\" (onShowMyTweets)=\"allTweets()\"></app-tweets-button>\n</ng-template>\n<div class=\"tweets-feed\">\n    <app-tweet-item *ngFor=\"let tweet of tweets\" [username]=\"username\" [tweet]=\"tweet\" (onDeleteTweet)=\"deleteTweet($event)\"></app-tweet-item>\n</div>\n<button (click)=\"onLogOut()\" class=\"tweets-button logout\">Log out</button>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}